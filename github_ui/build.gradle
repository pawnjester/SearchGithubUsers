plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
}

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        consumerProguardFiles "consumer-rules.pro"

        buildConfigField("String", "API_KEY", localProperties['apikey'])

        testInstrumentationRunner "com.example.github_ui.CustomTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    def presentationDependencies = rootProject.ext
    def testDependencies = rootProject.ext.testDependencies

    def remoteDependencies = rootProject.ext.remoteDependencies

    implementation(
            presentationDependencies.appDependencies.daggerHiltAndroid,
            presentationDependencies.appDependencies.kotlin,
            presentationDependencies.appDependencies.androidKtx,
            presentationDependencies.appDependencies.lottie,
            presentationDependencies.appDependencies.daggerHiltViewModel,
            presentationDependencies.appDependencies.javax,
            presentationDependencies.appDependencies.androidXViewModel,
            presentationDependencies.appDependencies.coroutines,
            presentationDependencies.appDependencies.coroutinesAndroid,
            presentationDependencies.appDependencies.flowAndroid,

            presentationDependencies.uiDependencies.material,
            presentationDependencies.uiDependencies.navigationFragment,
            presentationDependencies.uiDependencies.navigationUI,
            presentationDependencies.uiDependencies.fragment,
            presentationDependencies.uiDependencies.recyclerView,
            presentationDependencies.uiDependencies.constraintLayout,
            presentationDependencies.uiDependencies.androidLegacy,
            presentationDependencies.uiDependencies.appCompat,
            presentationDependencies.uiDependencies.liveData,
            presentationDependencies.uiDependencies.shimmer,
            presentationDependencies.uiDependencies.glide,
            presentationDependencies.uiDependencies.lifeCycle,
            remoteDependencies.okHttpLoggingInterceptor,
            remoteDependencies.okHttp,
            remoteDependencies.retrofit,
            remoteDependencies.retrofitConversion,

            project(":core"),
            project(":domain"),
            project(":data"),
            project(":cache"),
            project(":remote"),
    )

    kapt presentationDependencies.appDependencies.daggerXcompiler
    kapt presentationDependencies.appDependencies.daggerCompiler

    androidTestImplementation(
            presentationDependencies.testDependencies.espresso,

            testDependencies.espressoContrib,
            testDependencies.fragmentTesting,
            testDependencies.rules,
            testDependencies.testRunner,
            testDependencies.archCoreTest,
            testDependencies.hiltTesting,
            testDependencies.truth,
            testDependencies.jUnitX,
            testDependencies.androidXTest,
            testDependencies.androidXTestCore,
    )

    kaptAndroidTest(
            presentationDependencies.appDependencies.daggerXcompiler,
            presentationDependencies.appDependencies.daggerCompiler,
    )

    testImplementation(
            testDependencies.truth,
            testDependencies.archCoreTest,
            testDependencies.mockitoKotlin,
            testDependencies.mockito,
            testDependencies.coroutinesTest,
            testDependencies.konveyor,
            testDependencies.mockk,
            presentationDependencies.testDependencies.jUnit,
            presentationDependencies.testDependencies.roboelectric,
            presentationDependencies.testDependencies.jUnitX,
            presentationDependencies.appDependencies.coroutines,
    )
}